import React, { useState, useRef, useEffect } from 'react';
import Button from './Button.jsx';
import { TiLocationArrow } from 'react-icons/ti';
import gsap from 'gsap';
import {useGSAP} from "@gsap/react";
import {ScrollTrigger} from "gsap/all";


gsap.registerPlugin(ScrollTrigger);

const Hero = () => {
    const [currentIndex, setCurrentIndex] = useState(1);
    const [hasClicked, setHasClicked] = useState(false);
    const [loadedVideos, setLoadedVideos] = useState(0);
    const [loading, setLoading] = useState(true);

    const totalVideos = 4;
    const currentVideoRef = useRef(null);
    const nextVideoRef = useRef(null);

    const handleVideoLoad = () => {
        setLoadedVideos((prevLoaded) => prevLoaded + 1);
    };

    const upcomingVideoIndex = (currentIndex % totalVideos) + 1;

    const handleMiniVdClick = () => {
        setHasClicked(true);
        setCurrentIndex(upcomingVideoIndex);
    };
    useEffect(() => {
        if (loadedVideos === totalVideos - 1) {
            setLoading(false);
        }
    }, [loadedVideos]);

    useEffect(() => {
            if (hasClicked) {
                // Set the next video to be visible
                gsap.set(nextVideoRef.current, { visibility: 'visible' });

                // Animate the next video to zoom in
                gsap.to(nextVideoRef.current, {
                    transformOrigin: 'center center',
                    scale: 1,
                    width: '100%',
                    height: '100%',
                    duration: 0.5,
                    ease: 'power1.inOut',
                    onStart: () => nextVideoRef.current.play(),
                });

                // Animate the current video to zoom out
                gsap.from(currentVideoRef.current, {
                    transformOrigin: 'center center',
                    scale: 0,
                    duration: 1.5,
                    ease: 'power1.inOut',
                    onComplete: () => {
                        // Reset hasClicked to allow future clicks
                        setHasClicked(false);
                    },
                });
            }
        },
        {
            dependencies: [currentIndex],
            revertOnUpdate: true,
        }
    );


    useGSAP(() => {
        gsap.set("#video-frame", {
            clipPath: "polygon(14% 0, 72% 0, 88% 90%, 0 95%)",
            borderRadius: "0% 0% 40% 10%",
        });
        gsap.from("#video-frame", {
            clipPath: "polygon(0% 0%, 100% 0%, 100% 100%, 0% 100%)",
            borderRadius: "0% 0% 0% 0%",
            ease: "power1.inOut",
            scrollTrigger: {
                trigger: "#video-frame",
                start: "center center",
                end: "bottom center",
                scrub: true,
            },
        });




    });

    const getVideoSrc = (index) => `videos/hero-${index}.mp4`;

    return (
        <div className="relative h-dvh w-screen overflow-x-hidden">
            {loading && (
                <div className="flex-center absolute z-[100] h-dvh w-screen overflow-hidden bg-violet-50">
                    {/* https://uiverse.io/G4b413l/tidy-walrus-92 */}
                    <div className="three-body">
                        <div className="three-body__dot"></div>
                        <div className="three-body__dot"></div>
                        <div className="three-body__dot"></div>
                    </div>
                </div>
            )}
            <div
                id="video-frame"
                className="relative z-10 h-dvh w-screen overflow-hidden rounded-lg bg-blue-75"
            >
                {/* Mini Video Switcher */}
                <div className="mask-clip-path absolute-center absolute z-50 size-64 cursor-pointer overflow-hidden">
                    <div
                        onClick={handleMiniVdClick}
                        className="origin-center scale-100 opacity-100 transition-all duration-500 ease-in"
                    >
                        <video
                            ref={currentVideoRef}
                            src={getVideoSrc(upcomingVideoIndex)}
                            loop
                            muted
                            id="current-video"
                            className="size-64 origin-center scale-150 object-cover object-center"
                            onLoadedData={handleVideoLoad}
                        />
                    </div>
                </div>

                {/* Background Video */}
                <video
                    ref={nextVideoRef}
                    src={getVideoSrc(currentIndex)}
                    loop
                    muted
                    id="next-video"
                    className="absolute-center invisible absolute z-20 size-64 object-cover object-center"
                    onLoadedData={handleVideoLoad}
                />

                {/* Main Background Video */}
                <video
                    src={getVideoSrc(currentIndex)}
                    autoPlay
                    loop
                    muted
                    className="absolute left-0 top-0 w-full h-full object-cover object-center"
                    onLoadedData={handleVideoLoad}
                />
            </div>

            {/* Text Elements */}
            <h1 className="special-font hero-heading absolute bottom-5 right-5 z-40 text-blue-75">
                G<b>a</b>ming
            </h1>

            <div className="absolute left-0 top-0 z-40 w-full h-full">
                <div className="mt-24 px-5 sm:px-10">
                    <h1 className="special-font hero-heading text-blue-100">
                        redefi<b>n</b>e
                    </h1>
                    <p className="mb-5 max-w-64 font-robert-regular text-blue-100">
                        Enter the Metagame Layer <br /> Unleash the Play Economy
                    </p>
                    <Button
                        id="watch-trailer"
                        title="Watch Trailer"
                        leftIcon={<TiLocationArrow />}
                        containerClass="!bg-yellow-300 flex-center gap-1"
                    />
                </div>
            </div>

            <h1 className="special-font hero-heading absolute bottom-5 right-5 text-black">
                G<b>a</b>ming
            </h1>
        </div>
    );
};

export default Hero;